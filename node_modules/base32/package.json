{
  "name": "base32",
  "description": "Base32 encoding and decoding",
  "version": "0.0.5",
  "author": {
    "name": "Isaac Wolkerstorfer",
    "email": "agnoster@gmail.com",
    "url": "http://agnoster.net/"
  },
  "homepage": "https://github.com/agnoster/base32-js",
  "repository": {
    "type": "git",
    "url": "git://github.com/agnoster/base32-js.git"
  },
  "main": "./lib/base32",
  "bin": {
    "base32": "./bin/base32.js"
  },
  "scripts": {
    "test": "./node_modules/.bin/coffee test/*-test.coffee"
  },
  "engines": {
    "node": ">0.4"
  },
  "dependencies": {
    "optimist": ">=0.1.0"
  },
  "devDependencies": {
    "coffee-script": ">=1.0.0",
    "vows": ">=0.5.6"
  },
  "readme": "# Base 32 encoding/decoding for JavaScript [![build status](https://secure.travis-ci.org/agnoster/base32-js.png?branch=master)](http://travis-ci.org/agnoster/base32-js)\n\nBase 32 is between hexadecimal notation and Base 64 encoding. It's intended to be a **human-friendly** -- you don't have to worry about punctuation, capitalization, or letters/numbers that are easy to confuse, making it easier to transmit in handwriting or over the phone.\n\nOne of the primary purposes is to have aesthetically pleasing SHA1 hashes. Compare:\n\n - Hex: `17O57684bea1f9331418b633a8f373119d765fd4`\n - B64: `xE_ptB5SeclHm8JEsD0-ST1mTBM`\n - B32: `2w2qd15ym7wk650rprtuh4vk26eqcqym`\n\nTry giving out the Base 64 hash over the phone! \"lowercase 'x', capital 'E', underscore, lowercase 'p', ...\" Base 32 will work the same with upper- or lowercase, you can mistake a number for a similar-looking letter, and it will *still* decode to the same data.\n\n## Getting started\n\nIn your shell, install with npm:\n\n```sh\nnpm install base32\n```\n\nIn your code:\n\n```javascript\nvar base32 = require('base32')\n\n// simple api\n\nvar encoded = base32.encode('some data to encode')\nvar decoded = base32.decode(encoded)\n\n// streaming api\nthis.encoder = new Base32.encoder()\nthis.dataCallback = function(chunk) {\n    this.emit(this.encoder(chunk))\n}\nthis.closeCallback = function(chunk) {\n    this.emit(this.finish()) // flush any remaining bits\n}\n\n// easy sha1 hash\nvar hash = base32.sha1(some_data_to_hash) // DONE.\n```\n\nOn the command-line (to install system-wide, use `npm install -g base32`):\n\n```sh\nbase32 -h\n#> Usage: base32 [input_file] [-o output_file] [-d|--decode] [-s|--sha]\necho \"Hello World\" | base32\n#> 91jprv3f41bpywkccg50\necho 'axqqeb10d5u20wk5c5p6ry90exqq4uvk44' | base32 -d\n#> Wow, it really works!\nbase32 -s test/*\n#> ky2t1raumjn9cghne773petngx3zz3q7  test/base32-test.coffee\n#> 6b4bkjaveddmg5jh7hnyw132yht20g6e  test/compare.coffee\n```\n\n## Warning: this is *a* Base 32 implementation, not *the* Base 32 implementation\n\nThere are about (128 choose 32) different specifications of something called \"Base 32\" - see [Wikipedia](http://en.wikipedia.org/wiki/Base_32) for some of them.\n\nThis is just one that should be simple, less error-prone, and streamable (for [Node](http://nodejs.org)).\n\n## Minispec\n\n- The *encoding* alphabet consists of the numerals 0-9 and the letters a-z, excluding a few letters that might look like numbers, which we simply interpret as follows:\n\n  - I -> 1\n  - L -> 1\n  - O -> 0\n  - S -> 5\n\n- When *decoding*, capital letters are converted to lowercase and the \"ambiguous\" letters mentioned above converted to their numeric counterparts.\n- Each character corresponds to 5 bits of input.\n- Lexicographic order of strings is preserved through Base 32 encoding.\n\n## Formalia\n\nUnder MIT License.\n\nFork as much as you like, I'm more than amenable to pull requests. I'm trying to keep it reasonably node-ish, so bear that in mind.\n",
  "readmeFilename": "README.md",
  "_id": "base32@0.0.5",
  "dist": {
    "shasum": "8a9146860532ec0df3234fbb5406d791e05e581d"
  },
  "_from": "base32@",
  "_resolved": "https://registry.npmjs.org/base32/-/base32-0.0.5.tgz"
}
